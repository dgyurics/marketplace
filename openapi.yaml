openapi: 3.0.0
info:
  title: Marketplace API
  description: API documentation for the Marketplace backend
  version: 1.0.0

servers:
  - url: http://localhost
    description: Local Development Server

security:
  - BearerAuth: []

paths:
  /categories:
    get:
      summary: Get all categories
      description: Retrieves a list of all product categories.
      tags:
        - Categories
      responses:
        "200":
          description: Successfully retrieved categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        "500":
          description: Internal server error

    post:
      summary: Create a new category
      description: Creates a new product category. Requires admin privileges.
      tags:
        - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: Category successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized - Admin access required
        "500":
          description: Internal server error

  /categories/{id}:
    get:
      summary: Get category by ID
      description: Retrieves a specific category by its ID.
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
        "500":
          description: Internal server error
  /users/register:
    post:
      summary: Register a new user
      description: Creates a new user account with email and password.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: securepassword
                invite_code:
                  type: string
                  example: 123456
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
        "400":
          description: Invalid request
        "500":
          description: Internal server error

  /users/login:
    post:
      summary: Authenticate user
      description: Logs in a user with email and password, returning an access token and refresh token.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: securepassword
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refresh_token:
                    type: string
                    example: 6ed52f4f-d7f1-4f64-b3a3-3b6ccebf0ebd
        "400":
          description: Invalid request payload
        "401":
          description: Invalid credentials
        "500":
          description: Internal server error

  /users/logout:
    post:
      summary: Log out user
      description: Revokes all active refresh tokens for the authenticated user, effectively logging them out.
      tags:
        - Auth
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully logged out
        "401":
          description: Unauthorized - Missing or invalid token
        "500":
          description: Internal server error

  /users/refresh-token:
    post:
      summary: Refresh access token
      description: Generates a new access token using a valid refresh token.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: 6ed52f4f-d7f1-4f64-b3a3-3b6ccebf0ebd
      responses:
        "200":
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refresh_token:
                    type: string
                    example: 6ed52f4f-d7f1-4f64-b3a3-3b6ccebf0ebd
        "400":
          description: Invalid request payload
        "401":
          description: Invalid or expired refresh token
        "500":
          description: Internal server error

  /users/exists:
    post:
      summary: Check if a user exists
      description: Verifies whether a user with the given email exists in the system.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
      responses:
        "200":
          description: User existence check completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    example: true
        "400":
          description: Invalid request payload
        "500":
          description: Internal server error

  /users/guest:
    post:
      summary: Create a guest user
      description: Creates a temporary guest user with minimal details.
      tags:
        - Auth
      responses:
        "201":
          description: Guest user successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refresh_token:
                    type: string
                    example: 6ed52f4f-d7f1-4f64-b3a3-3b6ccebf0ebd
        "500":
          description: Internal server error

    patch:
      summary: Convert guest to registered user
      description: Upgrades a guest account by assigning an email and password.
      tags:
        - Auth
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: securepassword
      responses:
        "200":
          description: Guest user successfully converted to a registered user
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refresh_token:
                    type: string
                    example: 6ed52f4f-d7f1-4f64-b3a3-3b6ccebf0ebd
        "400":
          description: Invalid request payload
        "500":
          description: Internal server error

  /addresses:
    get:
      summary: Get user addresses
      description: Retrieves all saved addresses for the authenticated user.
      tags:
        - Addresses
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"
        "401":
          description: Unauthorized - Missing or invalid token
        "500":
          description: Internal server error
    post:
      summary: Add a new address
      description: Saves a new address for the authenticated user.
      tags:
        - Addresses
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addressee:
                  type: string
                  example: "John Doe"
                line1:
                  type: string
                  example: "123 Main St"
                line2:
                  type: string
                  nullable: true
                  example: "Apt 4B"
                city:
                  type: string
                  example: "New York"
                state:
                  type: string
                  example: "NY"
                postal_code:
                  type: string
                  example: "10001"
      responses:
        "201":
          description: Address successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "abc123"
                  addressee:
                    type: string
                    example: "John Doe"
                  line1:
                    type: string
                    example: "123 Main St"
                  line2:
                    type: string
                    nullable: true
                    example: "Apt 4B"
                  city:
                    type: string
                    example: "New York"
                  state:
                    type: string
                    example: "NY"
                  postal_code:
                    type: string
                    example: "10001"
                  created_at:
                    type: string
                    format: date-time
                    example: "2025-03-04T12:00:00Z"
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized - Missing or invalid token
        "500":
          description: Internal server error

  /addresses/{id}:
    delete:
      summary: Remove an address
      description: Deletes a saved address for the authenticated user.
      tags:
        - Addresses
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Address successfully removed
        "400":
          description: Invalid address ID
        "401":
          description: Unauthorized - Missing or invalid token
        "500":
          description: Internal server error

  /users:
    get:
      summary: Get all users
      description: Retrieves a paginated list of all users. Requires admin privileges.
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
      responses:
        "200":
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - Missing or invalid token
        "403":
          description: Forbidden - Admin access required
        "500":
          description: Internal server error

  /users/invite:
    post:
      summary: Generate an invite code
      description: Generates a new invite code for user registration. Requires admin privileges.
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        "201":
          description: Successfully generated invite code
          content:
            application/json:
              schema:
                type: string
                example: "A1B2C3"
        "401":
          description: Unauthorized - Missing or invalid token
        "403":
          description: Forbidden - Admin access required
        "500":
          description: Internal server error

  /carts/items/{product_id}:
    post:
      summary: Add an item to the cart
      description: Adds a product to the authenticated user's cart.
      tags:
        - Cart
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  example: 2
      responses:
        "200":
          description: Item successfully added to the cart
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

    patch:
      summary: Update an item in the cart
      description: Updates the quantity of an existing item in the user's cart.
      tags:
        - Cart
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  example: 3
      responses:
        "200":
          description: Item successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

    delete:
      summary: Remove an item from the cart
      description: Deletes a specific product from the authenticated user's cart.
      tags:
        - Cart
      security:
        - BearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Item successfully removed
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /carts:
    get:
      summary: Get user's cart
      description: Retrieves the authenticated user's cart items along with their respective images.
      tags:
        - Cart
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CartItem"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /products:
    post:
      summary: Create a new product
      description: Adds a new product to the catalog.
      tags:
        - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Nordic Lounge Chair"
                price:
                  type: number
                  example: 29999
                description:
                  type: string
                  example: "A stylish and comfortable lounge chair with minimalist design."
      responses:
        "201":
          description: Product successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized - Admin access required
        "500":
          description: Internal server error

    get:
      summary: Get all products
      description: Retrieves a paginated list of products with optional filtering and sorting.
      tags:
        - Products
      parameters:
        - name: category
          in: query
          description: Filter products by one or more category slugs (e.g., category=chairs&category=sofas)
          schema:
            type: array
            items:
              type: string
            style: form
            explode: true
        - name: sort
          in: query
          description: Sort products by price (price_asc, price_desc)
          schema:
            type: string
            enum: [price_asc, price_desc]
        - name: in_stock
          in: query
          description: Filter products that are in stock only (true/false)
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 25
      responses:
        "200":
          description: Successfully retrieved products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "500":
          description: Internal server error

  /products/{id}:
    get:
      summary: Get product by ID
      description: Retrieves a single product by its ID.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "123"
      responses:
        "200":
          description: Successfully retrieved product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductWithInventory"
        "404":
          description: Product not found
        "500":
          description: Internal server error

    delete:
      summary: Delete product
      description: Removes a product from the catalog. Requires admin privileges.
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "123"
      responses:
        "200":
          description: Product successfully deleted
        "401":
          description: Unauthorized - Admin access required
        "404":
          description: Product not found
        "500":
          description: Internal server error

  /products/{id}/inventory:
    put:
      summary: Update product inventory
      description: Updates the inventory count for a specific product. Requires admin privileges.
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  example: 50
      responses:
        "200":
          description: Inventory successfully updated
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized - Admin access required
        "404":
          description: Product not found
        "500":
          description: Internal server error

  /orders:
    post:
      summary: Create a new order
      description: |
        Creates a new order using the provided address and current cart items, returning a full Order object.
        This endpoint should be called before the customer enters their credit card information and sends it to the payment handler.
        It creates a pending order with computed totals for tax and shipping, allowing the customer to review the final amount before proceeding with payment.
      tags:
        - Orders
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address_id:
                  type: string
                  example: "address-789"
                currency:
                  type: string
                  example: "usd"
      responses:
        "200":
          description: Order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized - Missing or invalid token
        "500":
          description: Internal server error
    get:
      summary: Retrieve user orders
      description: Retrieves all orders for the authenticated user.
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 25
      responses:
        "200":
          description: Successfully retrieved orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized - Missing or invalid token
        "500":
          description: Internal server error

  /orders/{order_id}:
    patch:
      summary: Update an order
      description: Updates an existing order.
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          description: The ID of the order to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                # FIXME missing some optional properties
                address_id:
                  type: string
                  example: "address-789"
                currency:
                  type: string
                  example: "usd"
      responses:
        "200":
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized - Missing or invalid token
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /orders/{order_id}/tax-estimate:
    get:
      summary: Get tax estimate for order
      description: Retrieves the tax estimate for a specific order.
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          description: The ID of the order to get tax estimate for
          schema:
            type: string
      responses:
        "200":
          description: Tax estimate retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tax_amount:
                    type: number
                    format: float
                    example: 8.25
                  tax_rate:
                    type: number
                    format: float
                    example: 0.0825
                  subtotal:
                    type: number
                    format: float
                    example: 100.00
                  total:
                    type: number
                    format: float
                    example: 108.25
        "401":
          description: Unauthorized - Missing or invalid token
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /products/categories/{category}:
    post:
      summary: Create product with category
      description: Creates a new product with the specified category.
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: category
          in: path
          required: true
          description: Category slug for the product
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Product successfully created with category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized - Admin access required
        "500":
          description: Internal server error

  /health:
    get:
      summary: Health check
      description: Returns the health status of the API server.
      tags:
        - Health
      responses:
        "200":
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
        "500":
          description: Internal server error

  /users/password-reset:
    post:
      summary: Request password reset
      description: Sends a password reset email to the user.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        "200":
          description: Password reset email sent
        "400":
          description: Invalid request payload
        "500":
          description: Internal server error

  /users/password-reset/confirm:
    post:
      summary: Confirm password reset
      description: Confirms password reset with token and new password.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "reset-token-123"
                password:
                  type: string
                  example: "newpassword123"
      responses:
        "200":
          description: Password successfully reset
        "400":
          description: Invalid request payload
        "500":
          description: Internal server error

  /users/credentials:
    put:
      summary: Update user credentials
      description: Updates credentials for authenticated user (guest to regular user conversion).
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "newpassword123"
      responses:
        "200":
          description: Credentials successfully updated
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /images/products/{id}:
    post:
      summary: Upload product image
      description: Uploads an image for a specific product.
      tags:
        - Images
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file
                type:
                  type: string
                  enum: [hero, gallery, thumbnail]
                  default: gallery
                  description: Image type
                alt_text:
                  type: string
                  description: Alt text for the image
                remove_background:
                  type: boolean
                  default: false
                  description: Whether to remove background from image
      responses:
        "201":
          description: Image successfully uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: string
                    example: "/images/products/123/image.jpg"
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /orders/{order_id}/confirm:
    post:
      summary: Confirm order
      description: Confirms an order after payment processing.
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        "200":
          description: Order successfully confirmed
        "400":
          description: Invalid request payload
        "401":
          description: Unauthorized
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /payment/events:
    post:
      summary: Handle payment events
      description: Webhook endpoint for payment provider events.
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Payment provider event payload
      responses:
        "200":
          description: Event processed successfully
        "400":
          description: Invalid request payload
        "500":
          description: Internal server error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Category:
      type: object
      properties:
        id:
          type: string
          example: "category-123"
        name:
          type: string
          example: "Electronics"
        slug:
          type: string
          example: "electronics"
        description:
          type: string
          example: "Electronic devices and gadgets"
        parent_id:
          type: string
          nullable: true
          example: null
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"

    User:
      type: object
      properties:
        id:
          type: string
          example: "user-123"
        email:
          type: string
          example: "user@example.com"
        role:
          type: string
          enum: [admin, user, guest]
          example: "user"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"

    Address:
      type: object
      properties:
        id:
          type: string
          example: "address-123"
        user_id:
          type: string
          example: "user-123"
        line1:
          type: string
          example: "123 Main St"
        line2:
          type: string
          nullable: true
          example: "Apt 4B"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        postal_code:
          type: string
          example: "10001"
        country:
          type: string
          example: "US"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"

    Product:
      type: object
      properties:
        id:
          type: string
          example: "product-123"
        name:
          type: string
          example: "Wireless Headphones"
        description:
          type: string
          example: "High-quality wireless headphones with noise cancellation"
        price:
          type: number
          format: float
          example: 199.99
        category_id:
          type: string
          nullable: true
          example: "category-123"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"

    ProductWithInventory:
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: object
          properties:
            inventory_count:
              type: integer
              example: 50

    CartItem:
      type: object
      properties:
        id:
          type: string
          example: "cart-item-123"
        user_id:
          type: string
          example: "user-123"
        product_id:
          type: string
          example: "product-123"
        quantity:
          type: integer
          example: 2
        product:
          $ref: "#/components/schemas/Product"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"

    Order:
      type: object
      properties:
        id:
          type: string
          example: "order-123"
        user_id:
          type: string
          example: "user-123"
        address_id:
          type: string
          example: "address-123"
        status:
          type: string
          enum: [pending, confirmed, processing, shipped, delivered, cancelled]
          example: "pending"
        subtotal:
          type: number
          format: float
          example: 199.99
        tax:
          type: number
          format: float
          example: 16.00
        shipping:
          type: number
          format: float
          example: 9.99
        total:
          type: number
          format: float
          example: 225.98
        currency:
          type: string
          example: "usd"
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"

    StripeEvent:
      type: object
      properties:
        id:
          type: string
          example: "evt_123"
        type:
          type: string
          example: "payment_intent.succeeded"
        data:
          type: object
          properties:
            object:
              type: object
              properties:
                id:
                  type: string
                  example: "pi_123"
        created:
          type: integer
          example: 1633024800