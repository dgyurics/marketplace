# Define cache path
proxy_cache_path /var/cache/nginx/images
    levels=1:2
    keys_zone=images:100m
    max_size=2g
    inactive=30d
    use_temp_path=off;

upstream api_backend {
    server api:8000;
}

upstream web_backend {
    server web:80;
}

upstream imgproxy_backend {
    server imgproxy:80;
}

server {
    listen 80;
    server_name localhost;

    # API routes - send /api/* to backend
    location /api/ {
        client_max_body_size 50M; # FIXME this should only be for /api/images/products/*
        proxy_pass http://api_backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Image proxy routes - send /images/* to imgproxy
    location /images/ {
        proxy_pass http://imgproxy_backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Enable caching
        proxy_cache images;
        proxy_cache_valid 200 7d; # Cache successful responses for 7 days
        proxy_cache_valid 404 1m; # Cache 404 responses for 1 minute
        proxy_cache_key $uri$is_args$args; # Cache key based on URL and query string

        add_header X-Cache-Status $upstream_cache_status; # Add cache status header

        # Cache even if only 1 user requests it
        proxy_cache_min_uses 1;

        # Serve stale content if imgproxy is down
        proxy_cache_use_stale error timeout invalid_header updating;
    }

    # Everything else goes to web container
    location / {
        proxy_pass http://web_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}