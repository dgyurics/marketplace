# Rate limiting zones - define the limits
limit_req_zone $binary_remote_addr zone=users:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=orders:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=webhooks:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=api_general:10m rate=20r/m;
limit_req_zone $binary_remote_addr zone=images:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=frontend:10m rate=100r/m;

# Return 429 instead of 503 for rate limit errors
limit_req_status 429;

server {
    listen 80;
    server_name marketplace;

    # Security Headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;

    # Gzip compression for API responses
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types application/json text/plain;

    # Rate limited API endpoints
    location ~ ^/api/users/(.*)$ {
        proxy_pass http://host.docker.internal:8000/users/$1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        limit_req zone=users burst=10 nodelay;
    }

    location ~ ^/api/orders/(.*)$ {
        proxy_pass http://host.docker.internal:8000/orders/$1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        limit_req zone=orders burst=5 nodelay;
    }

    location /api/payment/events {
        proxy_pass http://host.docker.internal:8000/payment/events;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        limit_req zone=webhooks burst=100 nodelay;
    }

    # Specific route - larger body size for product image uploads
    location /api/images/products/ {
        client_max_body_size 50M;
        proxy_pass http://host.docker.internal:8000/images/products/;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Catch-all API routes (no rate limit)
    location /api/ {
        proxy_pass http://host.docker.internal:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        limit_req zone=api_general burst=20 nodelay;
    }

    # Image proxy routes - send /images/* to imgproxy
    location /images/ {
        proxy_pass http://imgproxy/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        limit_req zone=images burst=100 nodelay;
    }

    # Everything else goes to web container
    location / {
        proxy_pass http://host.docker.internal:5173/;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        limit_req zone=frontend burst=1000 nodelay;
    }
}